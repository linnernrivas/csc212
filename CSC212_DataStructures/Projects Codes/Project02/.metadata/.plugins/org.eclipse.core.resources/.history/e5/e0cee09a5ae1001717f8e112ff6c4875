import java.io.*;
import java.net.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.security.*;

public class Server extends JFrame {
	
	private JTextField userText;
	private JTextArea chatWindow;
	private JButton submit;
	private ObjectOutputStream output;
	private ObjectInputStream input;
	private ServerSocket server;
	private Socket connection;
	
	//constructor
	public Server() {
		super("Server Instant Messenger");
		
		userText = new JTextField();
		userText.setEditable(false);
		userText.addActionListener(
				new ActionListener() {
					public void actionPerformed(ActionEvent event) {
						sendMessage(event.getActionCommand());
						userText.setText("");
					}
				}
		);
		
		add(userText, BorderLayout.SOUTH);
		submit =new JButton();
		chatWindow = new JTextArea();
		add(new JScrollPane(chatWindow), BorderLayout.CENTER);
		chatWindow.setSize(360,100);//setSize(900, 50);
		setVisible(true);
		
	}
	
	//set up and run the server
	public void startRunning() {
		try {
			server = new ServerSocket(12345, 100); //265 is port number. 10 is how many people waiting in connect to chat
			while(true) {
				try {
					waitForConnection();
					setupStreams();
					whileChatting();
				}catch(EOFException eofException) {
					showMessage("\n Server ended the connection! ");
				}finally {
					closeAll();
				}
			}
		}catch(IOException ioException) {
			ioException.printStackTrace();
		}
	}
	
	//wait for  connection, then display connection information
	private void waitForConnection() throws IOException{
		showMessage("waiting for someone to connect... \n");
		connection = server.accept(); 
		showMessage("Now connected to " + connection.getInetAddress().getHostName());
	}
	
	//get stream to send and receive data
	private void setupStreams() throws IOException{
		output = new ObjectOutputStream(connection.getOutputStream());
		output.flush();
		input = new ObjectInputStream(connection.getInputStream());
		showMessage("\n Streams are now setup! \n");
		
	}
	
	//during chat
	private void whileChatting() throws IOException{
		String message = "You are now connected!";
		sendMessage(message);
		ableToType(true);
		do {
			try {
				message = (String) input.readObject();
				showMessage("\n" + message);
			}catch(ClassNotFoundException classNotFoundException){
				showMessage("\n unsure what user sent");
			}
		}while(!message.equals("CLIENT - END"));
	}
		
	//close streams and sockets after chat
		public void closeAll() {
			showMessage("\n Closing connections... \n");
			ableToType(false);
			try {
				output.close();
				input.close();
				connection.close();
			}catch(IOException ioException) {
				ioException.printStackTrace();
			}
		}
		
		//send a message to client
		private void sendMessage(String message) {
			try {
				output.writeObject("SERVER - " + message);
				output.flush();
				showMessage("\n SERVER - " + message);
			}catch(IOException ioException) {
				chatWindow.append("\n ERROR: CANNOT SEND MESSAGE");
			}
		}
		//updates chatWindow
		private void showMessage(final String text) {
			SwingUtilities.invokeLater(
				new Runnable() {
					public void run() {
						chatWindow.append(text);
					}
				}
			);
		}
		
		//allow user to type
		private void ableToType(final boolean tof) {
			SwingUtilities.invokeLater(
				new Runnable() {
					public void run() {
						userText.setEditable(tof);
					}
				}
			);
		}
}


















